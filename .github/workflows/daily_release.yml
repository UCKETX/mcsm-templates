name: Daily Market Data Update and Release

on:
  schedule:
    # 每天UTC时间00:00运行 (北京时间08:00)
    - cron: '0 0 * * *'
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write
  actions: read

jobs:
  update-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -U -r requirements.txt

      - name: Backup Previous Server Data
        run: |
          # 备份现有的server.json文件
          if [ -f "server.json" ]; then
            cp server.json server_previous.json
          fi

      - name: Update Database and Generate Server Data
        run: |
          echo "开始更新数据库..."
          python main.py -i
          python main.py -u
          echo "生成服务器数据..."
          python generate_market.py

      - name: Check for Changes and Generate Release Notes
        id: changes
        run: |
          # 检查文件变化
          CHANGES_DETECTED=false
          
          # 备份当前文件用于比较
          if [ -f "server.json" ]; then
            cp server.json server_previous.json
          fi
          
          # 检查server.json是否有变化
          if [ -f "server_previous.json" ] && [ -f "server.json" ]; then
            if ! cmp -s server_previous.json server.json; then
              CHANGES_DETECTED=true
              echo "检测到server.json文件变化"
            fi
          elif [ -f "server.json" ]; then
            CHANGES_DETECTED=true
            echo "检测到新的server.json文件"
          fi
          
          # 生成详细的变更说明
          if [ "$CHANGES_DETECTED" = "true" ]; then
            echo "正在分析变更内容..."
            
            # 创建Python脚本分析JSON文件变化
            cat > analyze_changes.py << 'EOF'
            import json
            import os
            from datetime import datetime
            
            def analyze_changes():
                changes = {
                    "new_versions": [],
                    "updated_versions": [],
                    "removed_versions": [],
                    "new_cores": [],
                    "stats": {}
                }
                
                try:
                    old_data = {}
                    if os.path.exists("server_previous.json"):
                        with open("server_previous.json", "r", encoding="utf-8") as f:
                            old_data = json.load(f)
                    
                    new_data = {}
                    if os.path.exists("server.json"):
                        with open("server.json", "r", encoding="utf-8") as f:
                            new_data = json.load(f)
                    
                    old_packages = {pkg["id"]: pkg for pkg in old_data.get("packages", [])}
                    new_packages = {pkg["id"]: pkg for pkg in new_data.get("packages", [])}
                    
                    old_cores = set()
                    new_cores = set()
                    
                    for pkg_id, pkg in old_packages.items():
                        core_type = pkg.get("languages", [""])[0] if pkg.get("languages") else ""
                        if core_type:
                            old_cores.add(core_type)
                    
                    for pkg_id, pkg in new_packages.items():
                        core_type = pkg.get("languages", [""])[0] if pkg.get("languages") else ""
                        if core_type:
                            new_cores.add(core_type)
                        
                        if pkg_id not in old_packages:
                            changes["new_versions"].append({
                                "id": pkg_id,
                                "name": pkg.get("name", ""),
                                "core": core_type,
                                "version": pkg.get("version", "")
                            })
                        elif old_packages[pkg_id] != pkg:
                            changes["updated_versions"].append({
                                "id": pkg_id,
                                "name": pkg.get("name", ""),
                                "core": core_type,
                                "version": pkg.get("version", "")
                            })
                    
                    for pkg_id, pkg in old_packages.items():
                        if pkg_id not in new_packages:
                            core_type = pkg.get("languages", [""])[0] if pkg.get("languages") else ""
                            changes["removed_versions"].append({
                                "id": pkg_id,
                                "name": pkg.get("name", ""),
                                "core": core_type,
                                "version": pkg.get("version", "")
                            })
                    
                    for core in new_cores:
                        if core not in old_cores:
                            changes["new_cores"].append(core)
                    
                    changes["stats"] = {
                        "total_packages": len(new_packages),
                        "total_cores": len(new_cores),
                        "new_count": len(changes["new_versions"]),
                        "updated_count": len(changes["updated_versions"]),
                        "removed_count": len(changes["removed_versions"])
                    }
                    
                    return changes
                
                except Exception as e:
                    print(f"分析变更时出错: {e}")
                    return changes
            
            changes = analyze_changes()
            
            release_notes = []
            release_notes.append(f"# 🚀 MCSL服务器数据更新 - {datetime.now().strftime('%Y-%m-%d')}")
            release_notes.append("")
            release_notes.append("## 📊 更新统计")
            release_notes.append(f"- 📦 总包数量: {changes['stats']['total_packages']}")
            release_notes.append(f"- 🎯 支持核心: {changes['stats']['total_cores']} 种")
            release_notes.append(f"- ✨ 新增版本: {changes['stats']['new_count']} 个")
            release_notes.append(f"- 🔄 更新版本: {changes['stats']['updated_count']} 个")
            release_notes.append(f"- ❌ 移除版本: {changes['stats']['removed_count']} 个")
            release_notes.append("")
            
            if changes["new_cores"]:
                release_notes.append("## 🎉 新增核心类型")
                for core in changes["new_cores"]:
                    release_notes.append(f"- {core}")
                release_notes.append("")
            
            if changes["new_versions"]:
                release_notes.append("## ✨ 新增版本")
                core_groups = {}
                for version in changes["new_versions"]:
                    core = version["core"]
                    if core not in core_groups:
                        core_groups[core] = []
                    core_groups[core].append(version)
                
                for core, versions in core_groups.items():
                    release_notes.append(f"### {core}")
                    for version in versions[:10]:
                        release_notes.append(f"- {version['name']} ({version['version']})")
                    if len(versions) > 10:
                        release_notes.append(f"- ... 还有 {len(versions) - 10} 个版本")
                    release_notes.append("")
            
            if changes["updated_versions"]:
                release_notes.append("## 🔄 更新版本")
                core_groups = {}
                for version in changes["updated_versions"]:
                    core = version["core"]
                    if core not in core_groups:
                        core_groups[core] = []
                    core_groups[core].append(version)
                
                for core, versions in core_groups.items():
                    release_notes.append(f"### {core}")
                    for version in versions[:10]:
                        release_notes.append(f"- {version['name']} ({version['version']})")
                    if len(versions) > 10:
                        release_notes.append(f"- ... 还有 {len(versions) - 10} 个版本")
                    release_notes.append("")
            
            if changes["removed_versions"]:
                release_notes.append("## ❌ 移除版本")
                core_groups = {}
                for version in changes["removed_versions"]:
                    core = version["core"]
                    if core not in core_groups:
                        core_groups[core] = []
                    core_groups[core].append(version)
                
                for core, versions in core_groups.items():
                    release_notes.append(f"### {core}")
                    for version in versions[:10]:
                        release_notes.append(f"- {version['name']} ({version['version']})")
                    if len(versions) > 10:
                        release_notes.append(f"- ... 还有 {len(versions) - 10} 个版本")
                    release_notes.append("")
            
            release_notes.append("## 📋 文件说明")
            release_notes.append("- `server.json`: 服务器核心数据")
            release_notes.append("")
            release_notes.append("---")
            release_notes.append("*此版本由GitHub Actions自动生成*")
            
            with open("release_notes.md", "w", encoding="utf-8") as f:
                f.write("\n".join(release_notes))
            
            print("发布说明已生成")
          EOF
            
            # 运行Python脚本
            python3 analyze_changes.py
          fi
          
          echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        if: steps.changes.outputs.changes_detected == 'true'
        id: tag
        run: |
          # 生成基于日期的标签
          TAG_NAME="v$(date +'%Y.%m.%d')"
          
          # 如果同一天已有标签，添加序号
          COUNTER=1
          ORIGINAL_TAG=$TAG_NAME
          while git tag -l | grep -q "^$TAG_NAME$"; do
            TAG_NAME="${ORIGINAL_TAG}-${COUNTER}"
            COUNTER=$((COUNTER + 1))
          done
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "创建标签: $TAG_NAME"

      - name: Create GitHub Release
        if: steps.changes.outputs.changes_detected == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: "MCSL服务器数据 - ${{ steps.tag.outputs.tag_name }}"
          body_path: release_notes.md
          files: |
            server.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Temporary Files
        if: always()
        run: |
          rm -f server_previous.json
          rm -f release_notes.md

      - name: Summary
        if: steps.changes.outputs.changes_detected == 'true'
        run: |
          echo "✅ 数据更新完成并已发布到 Release: ${{ steps.tag.outputs.tag_name }}"
          echo "📦 包含文件: server.json"
          echo "📝 发布说明已自动生成"

      - name: No Changes Summary
        if: steps.changes.outputs.changes_detected == 'false'
        run: |
          echo "ℹ️ 未检测到数据变化，跳过发布"
          echo "📊 数据已是最新状态"